{"version":3,"sources":["Common/Components/Color.tsx","Common/Components/GradientGrid.tsx","Common/Components/Cube.tsx","Containers/App/index.tsx","index.tsx"],"names":["bgAnim","keyframes","Color","styled","div","Grid","str","i","css","delayedAnimation","GradientGrid","className","gridItems","Array","keys","map","key","rotateAnim","CubeWrapper","cubeSize","CubeSide","Cube","GlobalStyles","createGlobalStyle","Scene","main","App","ReactDOM","render","document","getElementById"],"mappings":"8/BAEA,IAAMA,EAASC,YAAH,KAoCGC,EAZDC,IAAOC,IAAV,IAMSJ,G,gXC3BpB,IAiBMK,EAAOF,IAAOC,IAAV,IAjBe,WAGvB,IAFA,IAAIE,EAAM,GAEDC,EAAI,EAAGA,GAAK,GAAIA,IAEvBD,GAAG,8BACaC,EADb,yCAEwB,IAAJA,EAFpB,sBAOL,OAAOC,YAAP,IACIF,GAcAG,IAWSC,EAPwC,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAClDC,EAAY,YAAIC,MAAM,IAAIC,QAAQC,KAAI,SAAAR,GAAC,OAC3C,kBAAC,EAAD,CAAOS,IAAKT,EAAGI,UAAU,qBAE3B,OAAO,kBAACN,EAAD,CAAMM,UAAWA,GAAYC,I,+vCC/BtC,IAAMK,EAAahB,YAAH,KASViB,EAAcf,IAAOC,IAAV,KAGN,qBAAGe,YACF,qBAAGA,WAIKF,GAMdG,EAAWjB,IAAOC,IAAV,KAKH,qBAAGe,YACF,qBAAGA,YAIgC,qBAAGA,YAI1B,qBAAGA,YAIH,qBAAGA,YAIH,qBAAGA,YAIH,qBAAGA,YAIH,qBAAGA,YA6BZE,EAzBmB,SAAC,GAA6B,IAA3BV,EAA0B,EAA1BA,UAAWQ,EAAe,EAAfA,SAC9C,OACE,kBAACD,EAAD,CAAaP,UAAS,eAAUA,GAAaQ,SAAUA,GACrD,kBAACC,EAAD,CAAUT,UAAU,QAAQQ,SAAUA,GACpC,kBAAC,EAAD,CAAcR,UAAU,cAE1B,kBAACS,EAAD,CAAUT,UAAU,OAAOQ,SAAUA,GACnC,kBAAC,EAAD,CAAcR,UAAU,cAE1B,kBAACS,EAAD,CAAUT,UAAU,QAAQQ,SAAUA,GACpC,kBAAC,EAAD,CAAcR,UAAU,cAE1B,kBAACS,EAAD,CAAUT,UAAU,OAAOQ,SAAUA,GACnC,kBAAC,EAAD,CAAcR,UAAU,cAE1B,kBAACS,EAAD,CAAUT,UAAU,MAAMQ,SAAUA,GAClC,kBAAC,EAAD,CAAcR,UAAU,cAE1B,kBAACS,EAAD,CAAUT,UAAU,SAASQ,SAAUA,GACrC,kBAAC,EAAD,CAAcR,UAAU,gB,ocCjFhC,IAAMW,EAAeC,YAAH,KAgBZC,EAAQrB,IAAOsB,KAAV,KAoBIC,EAXW,WACxB,OACE,kBAAC,WAAD,KACE,kBAACJ,EAAD,MACA,kBAACE,EAAD,KACE,kBAAC,EAAD,CAAMb,UAAU,OAAOQ,SAAS,cC9BxCQ,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.1d83cddf.chunk.js","sourcesContent":["import styled, { keyframes } from 'styled-components';\n\nconst bgAnim = keyframes`\n  0% {\n    background-color: hsla(0, 100%, 50%, 0.8);\n  }\n  16.6% {\n    background-color: hsla(60, 100%, 50%, 0.8);\n  }\n  33% {\n    background-color: hsla(120, 100%, 50%, 0.8);\n  }\n  49.9% {\n    background-color: hsla(180, 100%, 50%, 0.8);\n  }\n  66.5% {\n    background-color: hsla(240, 100%, 50%, 0.8);\n  }\n  83.1% {\n    background-color: hsla(300, 100%, 50%, 0.8);\n  }\n  100% {\n    background-color: hsla(360, 100%, 50%, 0.8);\n  }\n`;\n\nconst Color = styled.div`\n  background-color: #0f0;\n\n  width: 100%;\n  height: 100%;\n\n  animation-name: ${bgAnim};\n  animation-duration: 4s;\n  animation-timing-function: linear;\n  animation-iteration-count: infinite;\n`;\n\nexport default Color;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\n// import Gradient from './Gradient';\nimport Color from './Color';\n\nconst delayedAnimation = () => {\n  let str = '';\n\n  for (let i = 1; i <= 25; i++) {\n    // const delay = Math.floor(Math.random() * Math.floor(i * 1000)) * -1;\n    str += `\n      &:nth-child(${i}) {\n        animation-delay: ${i * 100}ms;\n      }\n    `;\n  }\n\n  return css`\n    ${str}\n  `;\n};\n\nconst Grid = styled.div`\n  width: 100%;\n  height: 100%;\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  grid-template-rows: repeat(5, 1fr);\n  grid-gap: 1vmin;\n\n  .gradient-item {\n    box-shadow: 0 0 40px;\n    ${delayedAnimation()}\n  }\n`;\n\nconst GradientGrid: React.FC<{ className?: string }> = ({ className }) => {\n  const gridItems = [...Array(25).keys()].map(i => (\n    <Color key={i} className=\"gradient-item\" />\n  ));\n  return <Grid className={className}>{gridItems}</Grid>;\n};\n\nexport default GradientGrid;\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport GradientGrid from './GradientGrid';\n\ntype CubeProps = {\n  className?: string;\n  cubeSize: CSSStyleDeclaration['width'];\n};\n\nconst rotateAnim = keyframes`\n  from {\n    transform: rotateX(-15deg) rotateY(0) rotateZ(0);\n  }\n  to {\n    transform: rotateX(-15deg) rotateY(360deg) rotateZ(0);\n  }\n`;\n\nconst CubeWrapper = styled.div<CubeProps>`\n  position: relative;\n  display: flex;\n  width: ${({ cubeSize }) => cubeSize};\n  height: ${({ cubeSize }) => cubeSize};\n  transform-style: preserve-3d;\n  backface-visibility: visible;\n\n  animation-name: ${rotateAnim};\n  animation-duration: 30s;\n  animation-timing-function: linear;\n  animation-iteration-count: infinite;\n`;\n\nconst CubeSide = styled.div<CubeProps>`\n  display: flex;\n  align-content: stretch;\n  justify-content: stretch;\n  position: absolute;\n  width: ${({ cubeSize }) => cubeSize};\n  height: ${({ cubeSize }) => cubeSize};\n  backface-visibility: visible;\n\n  &.front {\n    transform: rotateY(0deg) translateZ(calc(${({ cubeSize }) => cubeSize} / 2));\n  }\n  &.back {\n    transform: rotateY(180deg)\n      translateZ(calc(${({ cubeSize }) => cubeSize} / 2));\n  }\n  &.right {\n    transform: rotateY(90deg)\n      translateZ(calc(${({ cubeSize }) => cubeSize} / 2));\n  }\n  &.left {\n    transform: rotateY(-90deg)\n      translateZ(calc(${({ cubeSize }) => cubeSize} / 2));\n  }\n  &.top {\n    transform: rotateX(90deg)\n      translateZ(calc(${({ cubeSize }) => cubeSize} / 2));\n  }\n  &.bottom {\n    transform: rotateX(-90deg)\n      translateZ(calc(${({ cubeSize }) => cubeSize} / 2));\n  }\n`;\n\nconst Cube: React.FC<CubeProps> = ({ className, cubeSize }) => {\n  return (\n    <CubeWrapper className={`cude ${className}`} cubeSize={cubeSize}>\n      <CubeSide className=\"front\" cubeSize={cubeSize}>\n        <GradientGrid className=\"gradient\" />\n      </CubeSide>\n      <CubeSide className=\"back\" cubeSize={cubeSize}>\n        <GradientGrid className=\"gradient\" />\n      </CubeSide>\n      <CubeSide className=\"right\" cubeSize={cubeSize}>\n        <GradientGrid className=\"gradient\" />\n      </CubeSide>\n      <CubeSide className=\"left\" cubeSize={cubeSize}>\n        <GradientGrid className=\"gradient\" />\n      </CubeSide>\n      <CubeSide className=\"top\" cubeSize={cubeSize}>\n        <GradientGrid className=\"gradient\" />\n      </CubeSide>\n      <CubeSide className=\"bottom\" cubeSize={cubeSize}>\n        <GradientGrid className=\"gradient\" />\n      </CubeSide>\n    </CubeWrapper>\n  );\n};\n\nexport default Cube;\n","import React, { Fragment } from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport Cube from 'Common/Components/Cube';\n\nconst GlobalStyles = createGlobalStyle`\n  *, *:before, *:after {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  html, body, #root {\n    height: 100%;\n  }\n\n  body {\n    background: #222;\n  }\n`;\n\nconst Scene = styled.main`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  perspective: 150vmin;\n`;\n\nconst App: React.FC<{}> = () => {\n  return (\n    <Fragment>\n      <GlobalStyles />\n      <Scene>\n        <Cube className=\"cube\" cubeSize=\"50vmin\" />\n      </Scene>\n    </Fragment>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'Containers/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}